<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Default" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(ProjectFilePath)" />
  <UsingTask
    TaskName="DumpReferenceResolutionResult"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <ReferenceItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ReferencePathItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ProjectReferenceItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <BuiltProjectOutputGroupKeyOutputItem ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <TargetFrameworkMonikerProp ParameterType="System.String" Required="true" />
      <ProjectFilePath ParameterType="System.String" Required="true" />
      <ResultFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Linq"/>
      <Reference Include="System.Xml"/>
      <Reference Include="System.Xml.Linq"/>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Xml"/>
      <Using Namespace="System.Xml.Linq"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        Func<string, ITaskItem, XElement> getItemElement = (type, taskItem) =>
        {
          var itemElement = new XElement("item");
          itemElement.SetAttributeValue("itemType", type);
          itemElement.SetAttributeValue("evaluated", taskItem.ItemSpec);
          foreach (var metadataName in taskItem.MetadataNames.OfType<string>())
          {
            var metadataElement = new XElement("metadata");
            metadataElement.SetAttributeValue("name", metadataName);
            metadataElement.SetAttributeValue("evaluated", taskItem.GetMetadata(metadataName));
            itemElement.Add(metadataElement);
          }
          return itemElement;
        };
        
        var projectElement = new XElement("project");
        projectElement.SetAttributeValue("projectFile", ProjectFilePath);

        foreach (var item in ReferenceItems)
        {
          projectElement.Add(getItemElement("Reference", item));
        }
        foreach (var item in ReferencePathItems)
        {
          projectElement.Add(getItemElement("ReferencePath", item));
        }
        foreach (var item in ProjectReferenceItems)
        {
          projectElement.Add(getItemElement("ProjectReference", item));
        }
        projectElement.Add(getItemElement("BuiltProjectOutputGroupKeyOutput", BuiltProjectOutputGroupKeyOutputItem));
        
        var targetFrameworkMonikerElement = new XElement("property");
        targetFrameworkMonikerElement.SetAttributeValue("name", "TargetFrameworkMoniker");
        targetFrameworkMonikerElement.SetAttributeValue("evaluated", TargetFrameworkMonikerProp);
        projectElement.Add(targetFrameworkMonikerElement);
        
        using (var stream = File.Create(ResultFilePath))
        {
          projectElement.Save(stream);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Default" DependsOnTargets="ResolveReferences">
    <DumpReferenceResolutionResult ReferenceItems="@(Reference)" ReferencePathItems="@(ReferencePath)" ProjectReferenceItems="@(ProjectReference)" BuiltProjectOutputGroupKeyOutputItem="@(BuiltProjectOutputGroupKeyOutput)" TargetFrameworkMonikerProp="$(TargetFrameworkMoniker)" ProjectFilePath="$(ProjectFilePath)" ResultFilePath="$(ResultFilePath)"/>
  </Target>
</Project>